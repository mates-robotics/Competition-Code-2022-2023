/** A simulation of the autonomous phase for the FIRST First Tech Challenge.
 * Created as a tool to help visualise the code written in the autonomous phase
 * MATES Robotics #12365
 * Left click to export code
 * Use the link below for the full experience
 * https://www.khanacademy.org/computer-programming/ftc-power-play-autonomous-visualizer/5314230340861952?width=800&height=800
*/
//0=AutoRedRight, 1=AutoRedLeft, 2=AutoBlueLeft, 3=AutoBlueRight
var startPos = 0;

var animated = true; // the program will animate the autonomous phase if set to true. speeds not to scale with time (WIP)
// Input robot code here.  Assumes one space after any commas. Put statements in separate strings with commas
// drive, turn, strafe, extend, extend_precise, claw
var actions = [
    "methods.strafe(-21, 1000);",
    "methods.drive(27, 1000);",
    "methods.strafe(-12, 1000);",
    "methods.extend(4);",
    "methods.drive(5, 1000);",
    "methods.claw(true); //first cone dropped", 
    "methods.drive(-5, 1000);",
    "methods.extend(1);",
    "methods.strafe(12, 1000);",
    "methods.drive(24, 1000);",
    "methods.turn(90, 1000);",
    "methods.drive(48, 1000);",
    "methods.extend_precise(86);",
    "methods.claw(false); //second cone picked up",
    "methods.drive(-2, 1000);",
    "methods.turn(90, 1000);",
    "methods.strafe(10, 1000);",
    "methods.extend(2);",
    "methods.drive(4, 1000);",
    "methods.claw(true); //second cone dropped",
    "methods.drive(-4, 1000);",
    "methods.strafe(12, 1000);",
    "methods.drive(50, 100);",
    "methods.strafe(36, 1000); //parked",
];


// 1 inch = 5 pixels
angleMode = "degrees";
var positions = [[135.5, 39.25, 180], [135.5, 104.75, 180], [8.5, 39.25, 0], [8.5, 104.75, 0]];
var robotX = positions[startPos][0]; // Center of the robot
var robotY = positions[startPos][1];
var robotRot = positions[startPos][2];
var clawHeight = 0;
var heights = [0, 171, 1230, 2117, 2906];
var clawIsOpen = false;
var junctions = [[24, 24, 0], [24, 48, 1], [24, 72, 0], [24, 96, 1], [24, 120, 0], [48, 24, 1], [48, 48, 2], [48, 72, 3], [48, 96, 2], [48, 120, 1], [72, 24, 0], [72, 48, 3], [72, 72, 0], [72, 96, 3], [72, 120, 0], [96, 24, 1], [96, 48, 2], [96, 72, 3], [96, 96, 2], [96, 120, 1], [120, 24, 0], [120, 48, 1], [120, 72, 0], [120, 96, 1], [120, 120, 0]];
var lineCode;
var animationStage = 0;
var animationActions = [];
var robotPos = [robotX, robotY, robotRot, clawHeight];
var currentAction;
var movementGoal = [0,0,0,0];
var negMovement = 1;
var stopTime = millis();
var timeGrabbed = false;
rectMode(CENTER);
textAlign(CENTER, CENTER);
// println("");
// for(var i = 1; i <= 5; i++) {
//     for(var j = 1; j <= 5; j++) {
//         print("[" + i*24 + ", " + j * 24 + "," + " _], ");
//     }
// } //(used to create the variable, junctions)

// functions to move the methods. matches onbotjava code
var methods = {
    drive : function(dist, speed) {
        robotX += parseFloat(dist)*Math.cos(radians(robotRot));
        robotY += parseFloat(dist)*Math.sin(radians(robotRot));
    },
    turn : function(deg, speed) {
        robotRot += parseFloat(deg);
    },
    strafe : function(dist, speed) {
        robotY += parseFloat(dist)*Math.cos(radians(robotRot));
        robotX -= parseFloat(dist)*Math.sin(radians(robotRot));
    },
    extend : function(pos, speed) {
        clawHeight = heights[parseFloat(pos)];
    },
    claw : function(open) {
        clawIsOpen = open;
    },
    extend_precise : function(dist) {
        clawHeight += parseFloat(dist);
    }
};

// draws the robot
var drawBot = function(x, y, rot, claw, clawOpen) {  
    pushMatrix();
    // move the robot to the position
    translate(x*5, y*5);
    // rotate the robot to the correct orientation
    rotate(rot + 90);
    // draw the robot frame
    fill(255);
    rect(0, 0, 11.75*5, 17*5);
    rect(0, 0, 7.75*5, 17*5);
    rect(0, -11, 7.75*5, 2*5);
    rect(0, 38, 7.75*5, 2*5);
    fill(200);
    // draw the wheels
    rect(37, 33, 15, 20);
    rect(-37, 33, 15, 20);
    rect(37, -32, 15, 20);
    rect(-37, -32, 15, 20);
    // draw the claw. green=open, red=closed
    if(clawOpen) {
        fill(0, 255, 0);
    } else {
        fill(255, 0, 0);
    }
    triangle(15, -41, -15, -41, 0, -15);
    // display claw encoder ticks
    fill(0);
    textSize(14);
    text(claw, 0, 15);
    popMatrix();
};
// draws a junction
var drawJunction = function(x, y, height) {
    pushMatrix();
    // move the junction to the correct position
    translate(x, y);
    // no borders
    stroke(255, 255, 255, 0);
    // draw ground junction
    if(height === 0) { 
        fill(125);
        ellipse(0, 0, 6*5, 6*5); //assumes 6 inch diameter
        fill(75);
        ellipse(0, 0, 4.25*5, 4.25*5);
        fill(100);
        arc(0, 2, 2.5*5, 2*5, 0, 180);
        arc(0, -2, 2.5*5, 2*5, 180, 360);
    } else { // draw other junctions
        fill(150);
        ellipse(0, 0, 5*5, 5*5); // assuming 5 inch diameter for thingy on ground
        fill(255, 255, 0);
        ellipse(0, 0, 2*5, 2*5); // assuming 2 inch diameter for the actual thing
        // display the junction height, L=low, M=medium, H=high
        fill(0);
        textSize(14);
        if(height === 1) {
            text("L", 0, 0);
            text("L", 0, 1);
        } else if(height === 2) {
            text("M", 0, 0);
            text("M", 0, 1);
        } else if(height === 3) {
            text("H", 0, 0);
            text("H", 0, 1);
        }
    }
    // reset border color to black
    stroke(0);
    popMatrix();
};
// draws the field. includes junctions
var drawField = function() {
    strokeWeight(1.6);
    pushMatrix();
    translate(40, 40);
    for(var i = 0; i <= 6; i++) {
        line(0, i*120, 720, i*120);
        line(i*120, 0, i*120, 720);
    }
    strokeWeight(1);
    // Draw the junctions
    for(var i = 0; i < junctions.length; i++) {
        drawJunction(junctions[i][0] * 5, junctions[i][1] * 5, junctions[i][2]);
    }
    stroke(0, 0, 0, 0);
    fill(0, 0, 255);
    rect(300, 60, 10, 120);
    rect(300, 660, 10, 120);
    fill(255, 0, 0);
    rect(420, 60, 10, 120);
    rect(420, 660, 10, 120);
    pushMatrix();
    rotate(45);
    rect(85, 0, 10, 170);
    rect(933, 0, 10, 170);
    rect(725, -254, 10, 85);
    rect(763, -217, 85, 10);
    fill(0, 0, 255);
    rect(509, 424, 170, 10);
    rect(509, -424, 170, 10);
    rect(295, 254, 10, 85);
    rect(257, 217, 85, 10);
    popMatrix();
    stroke(0);
};
// parses a given string into an array that has the function name at [0] and arguments at [1, 2, 3...]. unfortunately cant just run the function so gotta do switch case later :(
var parseCode = function(inputStr) {
    // create an array to store the output
    var output = [];
    // pulls everything from the start of the string to before the parenthesis. should be the name of the function
    output.push(inputStr.substring(0, inputStr.indexOf("("))); 
    // create an array that holds all arguments
    var arg = split(inputStr.substring(inputStr.indexOf("(") + 1, inputStr.indexOf(")")), ",");
    // iterate through the array to avoid multidimensional arrays
    for(var i = 0; i < arg.length; i++) {
        output.push(arg[i]);
    }
    return output;
};
// move on to the next step in animation
var nextAction = function(nextMethod, nextInd) {
    if(nextMethod === "methods.claw") {
        return [parseFloat(Math.abs(animationActions[nextInd][1]*Math.sin(radians(robotRot)))), parseFloat(Math.abs(animationActions[nextInd][1]*Math.cos(radians(robotRot)))), 0, 0];
        
    } else if(nextMethod === "methods.drive") {
        return [parseFloat(Math.abs(animationActions[nextInd][1]*Math.cos(radians(robotRot)))), parseFloat(Math.abs(animationActions[nextInd][1]*Math.sin(radians(robotRot)))), 0, 0];
        
    } else if(nextMethod === "methods.strafe") {
        return [parseFloat(Math.abs(animationActions[nextInd][1]*Math.sin(radians(robotRot)))), parseFloat(Math.abs(animationActions[nextInd][1]*Math.cos(radians(robotRot)))), 0, 0];
        
    } else if(nextMethod === "methods.extend") {
        return [0, 0, 0, 0];
        
    } else if(nextMethod === "methods.extend_precise") {
        return [0, 0, 0, parseFloat(animationActions[nextInd][1])];
        
    } else if(nextMethod === "methods.turn") {
        return [0, 0, parseFloat(animationActions[nextInd][1]), 0];
    }
};



// if not animated, jump to final position
if(!animated) {
    // iterate through each line given in the actions array
    for(var i = 0; i < actions.length; i++) {
        // parse the strings for function name and args
        lineCode = parseCode(actions[i]);
        // run the corresponding function name with arguments
        switch(lineCode[0]) {
            case "methods.claw":
                methods.claw(lineCode[1] === "true");
                break;
            case "methods.drive":
                methods.drive(lineCode[1], lineCode[2]);
                break;
            case "methods.strafe":
                methods.strafe(lineCode[1], lineCode[2]);
                break;
            case "methods.extend":
                methods.extend(lineCode[1], lineCode[2]);
                break;
            case "methods.extend_precise":
                methods.extend_precise(lineCode[1]);
                break;
            case "methods.turn":
                methods.turn(lineCode[1], lineCode[2]);
                break;
            default:
                throw("Invalid function name. Please check for any typos");
        }
    }
} else { // otherwise, parse code to create animation array
    // iterate through the actions array to parse code and animation frames
    for(var i = 0; i < actions.length; i++) {
        animationActions.push(parseCode(actions[i]));
    }
    // set the first movement goal based on type 
    movementGoal = nextAction(animationActions[0][0], 0);
}
frameRate(60);
// drawing loop and animation handling
var draw = function() {
    resetMatrix();
    background(255);
    drawField();
    drawBot(robotX, robotY, robotRot, clawHeight, clawIsOpen);
    if(animationStage < animationActions.length) {
        currentAction = animationActions[animationStage];
        negMovement = currentAction[1] > 0 ? 1 : -1;
        switch(currentAction[0]) {
            case "methods.claw":
                methods.claw(currentAction[1] === "true");
                if(!timeGrabbed) {
                    timeGrabbed = true;
                    stopTime = millis() + 500;
                } else if(millis() > stopTime) {
                    animationStage++;
                    robotPos = [robotX, robotY, robotRot, clawHeight];
                    movementGoal = nextAction(animationActions[animationStage][0], animationStage);
                }
                break;
            case "methods.drive":
                methods.drive(0.5 * negMovement, 0);
                robotX = constrain(robotX, robotPos[0] - movementGoal[0], robotPos[0] +  movementGoal[0]);
                robotY = constrain(robotY, robotPos[1] -  movementGoal[1], robotPos[1] + movementGoal[1]);
                break;
            case "methods.strafe":
                methods.strafe(0.5 * negMovement, 0);
                robotX = constrain(robotX, robotPos[0] - movementGoal[0], robotPos[0] +  movementGoal[0]);
                robotY = constrain(robotY, robotPos[1] -  movementGoal[1], robotPos[1] + movementGoal[1]);
                break;
            case "methods.extend":
                methods.extend(currentAction[1], 0);
                if(!timeGrabbed) {
                    timeGrabbed = true;
                    stopTime = millis() + 250;
                } else if(millis() > stopTime) {
                    animationStage++;
                    robotPos = [robotX, robotY, robotRot, clawHeight];
                    movementGoal = nextAction(animationActions[animationStage][0], animationStage);
                }
                break;
            case "methods.extend_precise":
                methods.extend_precise(currentAction[1]);
                if(!timeGrabbed) {
                    timeGrabbed = true;
                    stopTime = millis() + 500;
                } else if(millis() > stopTime) {
                    animationStage++;
                    robotPos = [robotX, robotY, robotRot, clawHeight];
                    movementGoal = nextAction(animationActions[animationStage][0], animationStage);
                }
                break;
            case "methods.turn":
                methods.turn(1.5 * negMovement, 0);
                robotRot = constrain(robotRot, robotPos[2] - movementGoal[2], robotPos[2] + movementGoal[2]);
                break; 
        }
        if((abs(-robotX + robotPos[0] + movementGoal[0]) < 0.005 || abs(-robotX + robotPos[0] - movementGoal[0]) < 0.005) && (abs(-robotY + robotPos[1] + movementGoal[1]) < 0.005 || abs(-robotY + robotPos[1] - movementGoal[1]) < 0.005) && (abs(-robotRot + robotPos[2] + movementGoal[2]) < 0.005 || abs(-robotRot + robotPos[2] - movementGoal[2]) < 0.005) && (abs(-clawHeight + robotPos[3] + movementGoal[3]) < 0.005 || abs(-clawHeight + robotPos[3] - movementGoal[3]) < 0.005)) {
            animationStage++;
            robotPos = [robotX, robotY, robotRot, clawHeight];
            movementGoal = nextAction(animationActions[animationStage][0], animationStage);
            timeGrabbed = false;
        }
    }
};

var mouseClicked = function() {
    for(var i = 0; i < actions.length; i++) {
        println(actions[i]);
    }
};
